/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "log_monitor_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace dsn { namespace tools {


log_monitor_entry::~log_monitor_entry() throw() {
}


void log_monitor_entry::__set_file(const std::string& val) {
  this->file = val;
}

void log_monitor_entry::__set_line(const int32_t val) {
  this->line = val;
}

void log_monitor_entry::__set_log(const std::string& val) {
  this->log = val;
}

void log_monitor_entry::__set_level(const int32_t val) {
  this->level = val;
}

void log_monitor_entry::__set_func(const std::string& val) {
  this->func = val;
}

uint32_t log_monitor_entry::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->file);
          this->__isset.file = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->line);
          this->__isset.line = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->log);
          this->__isset.log = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->level);
          this->__isset.level = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->func);
          this->__isset.func = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t log_monitor_entry::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("log_monitor_entry");

  xfer += oprot->writeFieldBegin("file", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->file);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("line", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->line);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("log", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->log);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("level", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->level);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("func", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->func);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(log_monitor_entry &a, log_monitor_entry &b) {
  using ::std::swap;
  swap(a.file, b.file);
  swap(a.line, b.line);
  swap(a.log, b.log);
  swap(a.level, b.level);
  swap(a.func, b.func);
  swap(a.__isset, b.__isset);
}

log_monitor_entry::log_monitor_entry(const log_monitor_entry& other0) {
  file = other0.file;
  line = other0.line;
  log = other0.log;
  level = other0.level;
  func = other0.func;
  __isset = other0.__isset;
}
log_monitor_entry::log_monitor_entry( log_monitor_entry&& other1) {
  file = std::move(other1.file);
  line = std::move(other1.line);
  log = std::move(other1.log);
  level = std::move(other1.level);
  func = std::move(other1.func);
  __isset = std::move(other1.__isset);
}
log_monitor_entry& log_monitor_entry::operator=(const log_monitor_entry& other2) {
  file = other2.file;
  line = other2.line;
  log = other2.log;
  level = other2.level;
  func = other2.func;
  __isset = other2.__isset;
  return *this;
}
log_monitor_entry& log_monitor_entry::operator=(log_monitor_entry&& other3) {
  file = std::move(other3.file);
  line = std::move(other3.line);
  log = std::move(other3.log);
  level = std::move(other3.level);
  func = std::move(other3.func);
  __isset = std::move(other3.__isset);
  return *this;
}
void log_monitor_entry::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "log_monitor_entry(";
  out << "file=" << to_string(file);
  out << ", " << "line=" << to_string(line);
  out << ", " << "log=" << to_string(log);
  out << ", " << "level=" << to_string(level);
  out << ", " << "func=" << to_string(func);
  out << ")";
}

}} // namespace
